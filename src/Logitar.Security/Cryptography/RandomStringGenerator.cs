namespace Logitar.Security.Cryptography;

/// <summary>
/// Provides functionality for generating random values.
/// </summary>
public abstract class RandomStringGenerator
{
  /// <summary>
  /// Initializes a new instance of the <see cref="RandomStringGenerator"/> class.
  /// </summary>
  protected RandomStringGenerator()
  {
  }

  /// <summary>
  /// Creates a string with a cryptographically strong random sequence of characters. The characters will be selected randomly in the following string:
  /// <br />!"#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
  /// </summary>
  /// <param name="count">The number of characters of random values to create. Defaults to 32 characters (256 bits).</param>
  /// <returns>A string populated with cryptographically strong random characters.</returns>
  public static string GetString(int count = 256 / 8)
  {
    return GetString("!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~", count);
  }
  /// <summary>
  /// Creates a string with a cryptographically strong random sequence of characters from the specified list of characters.
  /// </summary>
  /// <param name="characters">The list of characters to pick from.</param>
  /// <param name="count">The number of characters of random values to create. Defaults to 32 characters (256 bits).</param>
  /// <returns>A string populated with cryptographically strong random characters.</returns>
  /// <exception cref="ArgumentException">The list of characters contains more than 256 characters.</exception>
  public static string GetString(string characters, int count = 256 / 8)
  {
    const int MaximumLength = byte.MaxValue + 1;
    if (characters.Length > MaximumLength)
    {
      throw new ArgumentException($"A maximum of {MaximumLength} characters must be provided.", nameof(characters));
    }

    char[] s = new char[count];

    byte[] bytes = RandomNumberGenerator.GetBytes(s.Length);
    for (int i = 0; i < bytes.Length; i++)
    {
      // NOTE(fpion): pick a character from the specified list using the randomly generated bytes and assign it to the generated password.
      s[i] = characters[bytes[i] % characters.Length];
    }

    return new string(s);
  }
}
